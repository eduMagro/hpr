@if (session('abort'))
    <script>
        Swal.fire({
            icon: 'error',
            title: 'Acceso denegado',
            text: "{{ session('abort') }}",
        }).then(() => {
            window.location.reload(); // Recarga la p√°gina tras el mensaje
        });
    </script>
@endif

@if ($errors->any())
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            let erroresHtml = '';
            let erroresTexto = '';
            @foreach ($errors->all() as $error)
                erroresHtml += '<li>{{ $error }}<\/li>';
                erroresTexto += '- {{ $error }}\n';
            @endforeach

            Swal.fire({
                icon: 'error',
                title: 'Errores encontrados',
                html: '<ul>' + erroresHtml + '</ul>',
                confirmButtonColor: '#d33',
                showCancelButton: true,
                cancelButtonText: "Reportar Error"
            }).then((result) => {
                if (result.dismiss === Swal.DismissReason.cancel) {
                    notificarProgramador(erroresTexto);
                }
            });
        });
    </script>
@endif


@if (session('error'))
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const nombreArchivo = @json(session('nombre_archivo', null));
            let errorMensaje = {!! json_encode(session('error')) !!};

            // ‚úÖ Si hay nombre de archivo y no est√° en el mensaje, a√±adirlo
            if (nombreArchivo && !errorMensaje.includes(nombreArchivo)) {
                errorMensaje = `üìÑ Archivo: ${nombreArchivo}\n\n${errorMensaje}`;
            }

            Swal.fire({
                icon: 'error',
                title: 'Error',
                html: '<div style="text-align: left; white-space: pre-wrap;">' + errorMensaje.replace(/\n/g,
                    '<br>') + '</div>',
                confirmButtonColor: '#d33',
                showCancelButton: true,
                cancelButtonText: "Reportar Error"
            }).then((result) => {
                if (result.dismiss === Swal.DismissReason.cancel) {
                    notificarProgramador(errorMensaje, 'Error en procesamiento de archivo');
                }
            });
        });
    </script>
@endif

@if (session('success'))
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const mensaje = @json(session('success'));
            const esImportacion = @json(session('import_report', false));
            const tieneAdvertencias = @json(session('tiene_advertencias', false));
            const nombreArchivo = @json(session('nombre_archivo', null));

            // ‚úÖ SI ES IMPORTACI√ìN ‚Üí Formato especial con HTML
            if (esImportacion) {
                // Convertir saltos de l√≠nea a <br> para mostrar en HTML
                const mensajeHtml = mensaje.replace(/\n/g, '<br>');

                // Configuraci√≥n especial para importaciones
                const config = {
                    icon: 'success',
                    html: '<div style="text-align: left; font-family: monospace; white-space: pre-wrap;">' +
                        mensajeHtml + '</div>',
                    confirmButtonColor: '#28a745',
                    width: '650px',
                };

                // Si tiene advertencias, a√±adir bot√≥n de reportar
                if (tieneAdvertencias) {
                    config.showCancelButton = true;
                    config.cancelButtonText = '‚ö†Ô∏è Reportar Advertencias';
                    config.confirmButtonText = 'Aceptar';
                    config.cancelButtonColor = '#f59e0b';
                }

                Swal.fire(config).then((result) => {
                    // Si clicke√≥ en "Reportar Advertencias"
                    if (result.dismiss === Swal.DismissReason.cancel && tieneAdvertencias) {
                        // Incluir nombre de archivo en el asunto
                        const asunto = nombreArchivo ?
                            `Advertencias en importaci√≥n: ${nombreArchivo}` :
                            'Advertencias en importaci√≥n de planillas';

                        notificarProgramador(mensaje, asunto);
                    }
                });
            }
            // ‚úÖ SI NO ES IMPORTACI√ìN ‚Üí Formato simple (como antes)
            else {
                Swal.fire({
                    icon: 'success',
                    text: mensaje, // ‚Üê Texto simple sin formateo
                    confirmButtonColor: '#28a745'
                }).then(() => {
                    console.log('Operaci√≥n exitosa:', mensaje);
                });
            }
        });
    </script>
@endif

@if (session('info'))
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            Swal.fire({
                icon: 'info',
                title: 'Informaci√≥n',
                text: @json(session('info')),
                confirmButtonColor: '#3B82F6' // azul Tailwind
            });
        });
    </script>
@endif

@if (session('warning'))
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            Swal.fire({
                icon: 'warning',
                title: 'Atenci√≥n',
                text: @json(session('warning')),
                confirmButtonColor: '#FBBF24' // amarillo Tailwind
            });
        });
    </script>
@endif

@if (session('warnings'))
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            @foreach (session('warnings') as $warning)
                Swal.fire({
                    icon: 'warning',
                    title: 'Atenci√≥n',
                    text: "{{ $warning }}",
                    timer: 5000,
                    showConfirmButton: false
                });
            @endforeach
        });
    </script>
@endif


<!-- Funci√≥n para notificar a programadores -->
<script>
    function notificarProgramador(mensaje, asunto = 'Error reportado por usuario') {
        const urlActual = window.location.href;
        const usuario = '{{ auth()->user()->name ?? 'Usuario desconocido' }}';
        const email = '{{ auth()->user()->email ?? 'Email no disponible' }}';

        // ‚úÖ Mensaje completo con contexto mejorado
        const mensajeCompleto = `üîó URL: ${urlActual}

üë§ Usuario: ${usuario} (${email})
üìÖ Fecha/Hora: ${new Date().toLocaleString('es-ES')}

üìã ${asunto}

üìú Mensaje:
${mensaje}

---
Navegador: ${navigator.userAgent}`;

        fetch("{{ route('alertas.store') }}", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-CSRF-TOKEN': document
                        .querySelector('meta[name="csrf-token"]')
                        .content
                },
                body: JSON.stringify({
                    mensaje: mensajeCompleto,
                    enviar_a_departamentos: ['Programador']
                })
            })
            .then(async resp => {
                if (!resp.ok) {
                    const texto = await resp.text();
                    throw new Error(`HTTP ${resp.status}: ${texto}`);
                }
                return resp.json();
            })
            .then(data => {
                Swal.fire({
                    icon: 'success',
                    title: 'Notificaci√≥n enviada',
                    text: 'Los t√©cnicos han sido notificados y revisar√°n las advertencias.',
                    confirmButtonColor: '#28a745'
                });
            })
            .catch(err => {
                console.error('‚ö†Ô∏è Error al enviar notificaci√≥n:', err);
                Swal.fire({
                    icon: 'error',
                    title: 'Error al enviar',
                    text: 'No se pudo enviar la notificaci√≥n. Por favor contacte directamente con el equipo t√©cnico.',
                    confirmButtonColor: '#d33'
                });
            });
    }
</script>
